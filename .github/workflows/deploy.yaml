name: Test and Deploy Symfony App to EC2

on:
  push:
    branches: ["main"]
    paths:
      - "**/*"

  pull_request:
    branches: ["main"]
    paths:
      - "**/*"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # readme skipping starts
      # Step 2: Check if only README.md was changed
      - name: Check for README.md changes
        id: check_readme
        run: |
          echo "Checking if README.md has been changed..."
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "README.md" && echo "README.md changed" || echo "Other files changed"

      # Step 3: Skip CI/CD if only README.md was changed
      - name: Skip if only README.md was changed
        if: steps.check_readme.outputs.result == 'README.md changed'
        run: echo "Skipping CI/CD pipeline as only README.md was modified."
      # readme skipping ends

      # Step 2: Set up PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: pdo_mysql

      # Step 3: Install Composer dependencies
      - name: Install Composer Dependencies
        run: composer install --no-scripts --no-interaction --prefer-dist

      # Step 4: Run static code analysis with PHPStan
      - name: Run PHPStan
        run: vendor/bin/phpstan analyse src

      # Step 5: Install NPM dependencies
      - name: Install NPM dependencies
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Install NPM dependencies
        run: npm install

      # Step 6: Build Tailwind CSS
      - name: Build Tailwind CSS
        run: npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: steps.check_readme.outputs.result != 'README.md changed'

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configure SSH
      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # Step 3: Deploy to EC2
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh $EC2_USER@$EC2_HOST "
            # Navigate to the project directory
            cd ~/restaurant-management || git clone https://github.com/Engarif3/restaurant-management.git ~/restaurant-management

            # Set correct permissions for the entire directory
            sudo chmod -R 775 ~/restaurant-management &&
            sudo chown -R ubuntu:www-data ~/restaurant-management &&
            
            # Ensure the var directories exist and have the correct permissions
            sudo mkdir -p ~/restaurant-management/var/cache &&
            sudo mkdir -p ~/restaurant-management/var/logs &&
            sudo mkdir -p ~/restaurant-management/var/sessions &&
            sudo chmod -R 775 ~/restaurant-management/var &&
            sudo chown -R ubuntu:www-data ~/restaurant-management/var &&
            
            # Set permissions for the public/build directory
            sudo chmod -R 775 ~/restaurant-management/public/build &&
            sudo chown -R ubuntu:www-data ~/restaurant-management/public/build &&
            
            # Stash local changes if any
            git stash -u &&
            
            # Pull latest code from the main branch
            git pull origin main &&
            
            # Clear Symfony cache
            cd ~/restaurant-management &&
            php bin/console cache:clear --env=dev &&
            php bin/console cache:clear --env=prod &&
            
            # Install Composer dependencies and clear cache
            composer install --optimize-autoloader &&
            php bin/console doctrine:migrations:migrate --no-interaction
          "

          # Install PHP and Node.js on EC2 (if not already installed)
          ssh $EC2_USER@$EC2_HOST "
            # Install Node.js and npm if not already installed
            if ! command -v npm &> /dev/null; then
              curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash - 
              sudo apt-get install -y nodejs 
            fi

            # Install Composer dependencies and clear cache
            cd ~/restaurant-management &&
            composer install --optimize-autoloader &&
            php bin/console cache:clear --env=prod &&
            php bin/console doctrine:migrations:migrate --no-interaction
          "

          # Build Tailwind CSS (on EC2)
          ssh $EC2_USER@$EC2_HOST "
            cd ~/restaurant-management &&
            npm install &&
            npm run build
          "
